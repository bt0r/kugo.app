{"version":3,"sources":["assets/images/logo/logo_full.png","components/message/Message.tsx","components/button/Button.tsx","translations/fr.js","components/left-vector.svg","components/right-vector.svg","assets/images/store/android.png","assets/images/store/ios.svg","screens/home/App.tsx","serviceWorker.ts","index.tsx"],"names":["MessageComponent","props","isReversed","className","src","image","alt","title","content","defaultProps","Message","Button","href","link","target","rel","role","aria-label","t","app","name","description","full","short","stores","messages","reversed","App","leftVector","rightVector","logo","playStore","height","appStore","map","message","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"oNAAe,G,KAAA,IAA0B,uCCUnCA,G,UAA2C,SAACC,GAC9C,OACI,oCACKA,EAAMC,YACH,yBAAKC,UAAW,iBAAkBC,IAAK,cAAcH,EAAMI,MAAOC,IAAK,KAE3E,yBAAKH,UAAW,WACZ,yBAAKA,UAAW,iBACXF,EAAMM,OAEX,yBAAKJ,UAAW,mBACXF,EAAMO,WAGbP,EAAMC,YACJ,yBAAKC,UAAW,QAASC,IAAK,cAAcH,EAAMI,MAAOC,IAAK,QAM9EN,EAAiBS,aAAe,CAC5BP,YAAY,GAGT,IAAMQ,EAAUV,EC3BVW,G,MAAgC,SAACV,GAC1C,OACI,uBAAGW,KAAMX,EAAMY,KAAMC,OAAQ,SAAUC,IAAK,uBACxC,4BAAQZ,UAAW,UACf,0BAAMa,KAAM,MAAOC,aAAY,gBAA/B,gBADJ,IAC8DhB,EAAMO,YCZnEU,EAAI,CACfC,IAAK,CACHC,KAAM,OACNC,YAAc,CACZC,KAAO,wHACPC,MAAO,oFAGXC,OAAQ,CACNH,YAAa,4CAEfI,SAAU,CACR,CACElB,MAAO,YACPC,QAAS,6LAETH,MAAO,oBACPqB,UAAU,GAEZ,CACEnB,MAAO,gBACPC,QAAS,yQAGTH,MAAO,aACPqB,UAAU,GAEZ,CACEnB,MAAO,kBACPC,QAAU,sGACVH,MAAO,cACPqB,UAAU,GAEZ,CACEnB,MAAO,UACPC,QAAS,2MAETH,MAAO,UACPqB,UAAU,KCtCD,MAA0B,wCCA1B,MAA0B,yCCA1B,MAA0B,oCCA1B,MAA0B,gCCwE1BC,EA7DH,WACR,OACI,6BACI,yBAAKvB,IAAKwB,EAAYzB,UAAW,cAAeG,IAAK,KACrD,yBAAKF,IAAKyB,EAAa1B,UAAW,eAAgBG,IAAK,KACvD,yBAAKH,UAAW,UACZ,wBAAIA,UAAW,QACX,4BACI,uBAAGS,KAAM,2BAAT,cAIZ,4BAAQT,UAAU,cACd,yBAAKC,IAAK0B,EAAMxB,IAAI,OAAOH,UAAW,SACtC,6BACA,kBAAC,EAAD,CACIU,KAAM,sGACNL,QAAS,sBACb,2BACKU,EAAEC,IAAIE,YAAYE,MACnB,6BACCL,EAAEC,IAAIE,YAAYC,MAEvB,yBAAKnB,UAAW,UACZ,6BACI,2BAAIe,EAAEM,OAAOH,cAEjB,yBAAKlB,UAAW,UACZ,yBACIC,IAAK2B,EACLzB,IAAK,aACL0B,OAAQ,KAEZ,yBACI5B,IAAK6B,EACL3B,IAAK,YACL0B,OAAQ,QAMxB,yBAAK7B,UAAW,YACXe,EAAEO,SAASS,KAAI,SAAAC,GACZ,OACI,yBAAKhC,UAAW,OACZiC,IAAKD,EAAQ5B,OACb,kBAAC,EAAD,CACIA,MAAO4B,EAAQ5B,MACfC,QAAS2B,EAAQ3B,QACjBN,WAAYiC,EAAQT,SACpBrB,MAAO8B,EAAQ9B,eClD3BgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACM,kBAAC,EAAD,OAENC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnB,c","file":"static/js/main.9cf297e6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo_full.031d3a5d.png\";","import React from \"react\";\nimport './Message.scss';\n\ntype MessageProps = {\n    title: string,\n    content: string,\n    isReversed?: boolean,\n    image: string\n}\n\nconst MessageComponent: React.FC<MessageProps> = (props) => {\n    return (\n        <>\n            {props.isReversed && (\n                <img className={'phone-reversed'} src={'images/app/'+props.image} alt={''} />\n            )}\n            <div className={'Message'}>\n                <div className={'Message-title'}>\n                    {props.title}\n                </div>\n                <div className={'Message-content'}>\n                    {props.content}\n                </div>\n            </div>\n            {!props.isReversed && (\n                <img className={'phone'} src={'images/app/'+props.image} alt={''} />\n            )}\n        </>\n\n    )\n}\nMessageComponent.defaultProps = {\n    isReversed: false\n}\n\nexport const Message = MessageComponent\n","import './Button.scss'\nimport React from \"react\";\n\ntype ButtonProps = {\n    content: string,\n    link: string\n}\n\nexport const Button: React.FC<ButtonProps> = (props) => {\n    return (\n        <a href={props.link} target={'_blank'} rel={'noopener noreferrer'}>\n            <button className={'Button'}>\n                <span role={'img'} aria-label={'emoji-rocket'}>🚀</span> {props.content}\n            </button>\n        </a>\n    )\n}\n","export const t = {\n  app: {\n    name: 'Kugo',\n    description : {\n      full:  \"Marre des faux profils ? Besoin de légèreté ? Nous aussi et c'est pour ces raisons que nous avons fait Kugo.\",\n      short: \"Application de rencontre légère 🍃, gratuite et sécurisée\"\n    },\n  },\n  stores: {\n    description: 'Bientôt disponible sur Android et iOS'\n  },\n  messages: [\n    {\n      title: 'Amusant !',\n      content: \"Un profil te plait ? lance une 🍑 pêche pour lui montrer ton intérêt ! A l'inverse, lance-lui une 🍅\" +\n          \" tomate pour ne plus jamais le croiser sur l'application.\",\n      image: 'swipette_male.jpg',\n      reversed: false\n    },\n    {\n      title: 'Simplicité',\n      content: \"Oubliez les phrases banales comme \\\"Tu cherches quoi ici ?\\\", votre profil donne déjà la couleur\" +\n          \" grâce à un système de badges exprimant vos envies. Alors, vous êtes plutôt à la recherche d'une\" +\n          \" rencontre avec standing ou plutôt go fast ?\",\n      image: 'badges.jpg',\n      reversed: true,\n    },\n    {\n      title: 'Sécurisée',\n      content:  \"Évitez les rencontres hasardeuses et les faux profils, sur Kugo chaque profil est vérifié.\",\n      image: 'profile.jpg',\n      reversed: false\n    },\n    {\n      title: 'Discret',\n      content: \"Besoin de discrétion afin d'éviter d'être visible par d'autres profils pendant un certains temps ?\" +\n          \" Kugo vous permet de choisir quand vous décidez ne plus être visible dans la recherche.\",\n      image: 'spy.jpg',\n      reversed: true\n    },\n  ]\n}\n","export default __webpack_public_path__ + \"static/media/left-vector.5e3bb700.svg\";","export default __webpack_public_path__ + \"static/media/right-vector.ebadd29e.svg\";","export default __webpack_public_path__ + \"static/media/android.8402d4a5.png\";","export default __webpack_public_path__ + \"static/media/ios.fa603df2.svg\";","import React from 'react';\nimport logo from '../../assets/images/logo/logo_full.png';\nimport './App.scss';\nimport {Message} from \"../../components/message/Message\";\nimport {Button} from \"../../components/button/Button\";\nimport {t} from '../../translations/fr';\nimport leftVector from '../../components/left-vector.svg';\nimport rightVector from '../../components/right-vector.svg';\nimport playStore from '../../assets/images/store/android.png';\nimport appStore from '../../assets/images/store/ios.svg';\n\nconst App = (): JSX.Element => {\n    return (\n        <div>\n            <img src={leftVector} className={'left-vector'} alt={''} />\n            <img src={rightVector} className={'right-vector'} alt={''} />\n            <nav className={'Navbar'}>\n                <ol className={'menu'}>\n                    <li>\n                        <a href={'mailto:contact@kugo.app'}>Contact</a>\n                    </li>\n                </ol>\n            </nav>\n            <header className=\"App-header\">\n                <img src={logo} alt=\"logo\" className={'logo'} />\n                <br />\n                <Button\n                    link={'https://docs.google.com/forms/d/e/1FAIpQLSen7iA-YRqSJS-UnHuWmD9fLSMr8SX3P1F_Glrb7JITmfCqxg/viewform'}\n                    content={'Rejoindre la beta'} />\n                <p>\n                    {t.app.description.short}\n                    <br/>\n                    {t.app.description.full}\n                </p>\n                <div className={\"Stores\"}>\n                    <div>\n                        <b>{t.stores.description}</b>\n                    </div>\n                    <div className={\"images\"}>\n                        <img\n                            src={playStore}\n                            alt={\"Play store\"}\n                            height={70}\n                        />\n                        <img\n                            src={appStore}\n                            alt={\"App store\"}\n                            height={50}\n                        />\n                    </div>\n                </div>\n            </header>\n\n            <div className={'Messages'}>\n                {t.messages.map(message => {\n                    return (\n                        <div className={'Line'}\n                            key={message.title}>\n                            <Message\n                                title={message.title}\n                                content={message.content}\n                                isReversed={message.reversed}\n                                image={message.image}\n                            />\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './screens/home/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n        <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}